// src/MyApp.jsx

import React, { useState, useEffect } from "react";
import Table from "./Table";
import Form from "./Form";

function MyApp() {
  const [characters, setCharacters] = useState([]); // empty state

  function removeOneCharacter(id) {
    deleteUser(id)
      .then((res) => {
        if (res.status === 204) {
          setCharacters(characters.filter((character) => character.id !== id));
        } else if (res.status === 404) {
          console.error("User not found!");
        } else {
          console.error("Failed to delete desired user!")
        }
      })
      .catch((error) => {
        console.error("Unable to delete user:", error);
      })
  }

  // function updateList(person) {
  //   setCharacters([...characters, person])
  // }

  // with updates -> table only updates if POST request is successful
  function updateList(person) {
    postUser(person)
      .then((res) => {
        if (res.status === 201) {
          // parsing response to get user
          return res.json();
        } else {
          throw new Error("Unusual Error!")
        }
      })
      .then((data) =>  {
        if (data && data.user) {
          setCharacters([...characters, data.user]); // '...' -> ES6 spread operator
        } else {
          throw new Error("Invalid data format from server")
        }
      }) 
      .catch((error) => {
        console.error("Couldn't add user:", error);
      });
  }

  // function to fetch users directly from the backend using Express APIs
  // returns promise to perform operation that takes time, basics of asynchronous 
  // (cont.) processing
  // promise generated by fetch()
  function fetchUsers() {
    const promise = fetch("http://localhost:8000/users");
    return promise;
  }

  // function used to make POST request calls, adding a new user to the backend
  // (cont.) and showin that user in the frontend
  // promises are used again here because the server needs to successfully create
  // (cont.) the new user
  // method -> used to make a POST instead of default GET
  // body -> putting person data into body of request
  // Content-Type (header) -> tellign server body contains JSON object
  function postUser(person) {
    const promise = fetch("http://localhost:8000/users", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(person)
    });

  return promise;
  }

  // fucntion to make DELETE requests, deleting a user from the backend
  function deleteUser(id) {
    const promise = fetch(`http://localhost:8000/users/${id}`, {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json"
      },
    })

    return promise;
  }

  // functional component to call fetchUsers()
  // .then() is used for when promise is fulfilled, setting component state using 
  // (cont.) setCharacters
  // res.json() used to parse response of promise from JSON format to JavaScript 
  // (cont.) object
  useEffect(() => {
    fetchUsers()
      .then((res) => res.json())
      .then((json) => setCharacters(json["users_list"]))
      .catch((error) => {
        console.log(error);
      });
  }, []);

  return (
   <div className ="container">
    <Table 
      characterData={characters}
      removeCharacter={removeOneCharacter} 
    />
    <Form handleSubmit={updateList} />
   </div>
  );
}

export default MyApp;
